{"version":3,"sources":["./src/app/auth/auth-routing.module.ts","./src/app/auth/auth.module.ts","./src/app/auth/login/login.component.ts","./src/app/auth/login/login.component.html","./src/app/auth/password-reset-request/password-reset-request.component.ts","./src/app/auth/password-reset-request/password-reset-request.component.html","./src/app/auth/password-reset/password-reset.component.ts","./src/app/auth/password-reset/password-reset.component.html"],"names":[],"mappings":"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","file":"auth-auth-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { LoginComponent } from './login/login.component';\nimport { PasswordResetRequestComponent } from './password-reset-request/password-reset-request.component';\nimport { PasswordResetComponent } from './password-reset/password-reset.component';\n\nconst routes: Routes = [\n  { path: 'login', component: LoginComponent },\n  { path: 'password-reset-request', component: PasswordResetRequestComponent },\n  { path: 'password-reset', component: PasswordResetComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class AuthRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { AuthRoutingModule } from './auth-routing.module';\nimport { SharedModule } from '../shared/shared.module';\nimport { LoginComponent } from './login/login.component';\nimport { PasswordResetRequestComponent } from './password-reset-request/password-reset-request.component';\nimport { PasswordResetComponent } from './password-reset/password-reset.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    SharedModule,\n    AuthRoutingModule\n  ],\n  declarations: [LoginComponent, PasswordResetRequestComponent, PasswordResetComponent]\n})\nexport class AuthModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { FormControl, Validators, FormGroup } from '@angular/forms';\nimport { Title } from '@angular/platform-browser';\nimport { EMPTY, of } from 'rxjs';\nimport 'rxjs/add/operator/delay';\n\nimport { AuthenticationService } from '../../core/services/auth.service';\nimport { NotificationService } from '../../core/services/notification.service';\n\n@Component({\n    selector: 'app-login',\n    templateUrl: './login.component.html',\n    styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n\n    loginForm: FormGroup;\n    loading: boolean;\n\n    constructor(private router: Router,\n        private titleService: Title,\n        private notificationService: NotificationService,\n        private authenticationService: AuthenticationService) {\n    }\n\n    ngOnInit() {\n        this.titleService.setTitle('angular-material-template - Login');\n        this.authenticationService.logout();\n        this.createForm();\n    }\n\n    private createForm() {\n        const savedUserEmail = localStorage.getItem('savedUserEmail');\n\n        this.loginForm = new FormGroup({\n            email: new FormControl(savedUserEmail, [Validators.required, Validators.email]),\n            password: new FormControl('', Validators.required),\n            rememberMe: new FormControl(savedUserEmail !== null)\n        });\n    }\n\n    login() {\n        const email = this.loginForm.get('email').value;\n        const password = this.loginForm.get('password').value;\n        const rememberMe = this.loginForm.get('rememberMe').value;\n\n        this.loading = true;\n        this.authenticationService\n            .login(email.toLowerCase(), password)\n            .subscribe(\n                data => {\n                    if (rememberMe) {\n                        localStorage.setItem('savedUserEmail', email);\n                    } else {\n                        localStorage.removeItem('savedUserEmail');\n                    }\n                    this.router.navigate(['/']);\n                },\n                error => {\n                    this.notificationService.openSnackBar(error.error);\n                    this.loading = false;\n                }\n            );\n    }\n\n    resetPassword() {\n        this.router.navigate(['/auth/password-reset-request']);\n    }\n}\n","<div class=\"container login-container\" fxLayout=\"row\" fxLayoutAlign=\"center center\">\n    <form [formGroup]=\"loginForm\" fxFlex=\"30%\" fxFlex.sm=\"50%\" fxFlex.xs=\"90%\">\n        <mat-card>\n            <mat-card-title>angular-material-template</mat-card-title>\n            <mat-card-subtitle>Log in to your account</mat-card-subtitle>\n            <mat-card-content>\n\n                <mat-form-field class=\"full-width\">\n                    <input id=\"emailInput\" matInput placeholder=\"Email\" formControlName=\"email\" autocomplete=\"email\"\n                        type=\"email\">\n\n                    <mat-error id=\"invalidEmailError\" *ngIf=\"loginForm.controls['email'].hasError('email')\">\n                        Please enter a valid email address\n                    </mat-error>\n                    <mat-error id=\"requiredEmailError\" *ngIf=\"loginForm.controls['email'].hasError('required')\">\n                        Email is\n                        <strong>required</strong>\n                    </mat-error>\n\n                </mat-form-field>\n\n                <mat-form-field class=\"full-width\">\n                    <input id=\"passwordInput\" matInput placeholder=\"Password\" formControlName=\"password\" type=\"password\"\n                        autocomplete=\"current-password\">\n                    <mat-error id=\"requiredPasswordError\" *ngIf=\"loginForm.controls['email'].hasError('required')\">\n                        Password is\n                        <strong>required</strong>\n                    </mat-error>\n                </mat-form-field>\n\n                <div class=\"full-width\">\n                    <mat-slide-toggle formControlName=\"rememberMe\">Remember my email address</mat-slide-toggle>\n                </div>\n\n            </mat-card-content>\n\n            <mat-card-actions class=\"login-actions\">\n                <button mat-raised-button id=\"login\" color=\"primary\" [disabled]=\"loginForm.invalid || loading\"\n                    (click)=\"login()\">Login</button>\n                <button mat-button id=\"resetPassword\" (click)=\"resetPassword()\" type=\"button\">Reset Password</button>\n            </mat-card-actions>\n\n        </mat-card>\n\n        <mat-progress-bar *ngIf=\"loading\" mode=\"indeterminate\"></mat-progress-bar>\n    </form>\n</div>","import { Router } from '@angular/router';\nimport { Component, OnInit } from '@angular/core';\nimport { NGXLogger } from 'ngx-logger';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { Title } from '@angular/platform-browser';\n\nimport { AuthenticationService } from '../../core/services/auth.service';\nimport { NotificationService } from './../../core/services/notification.service';\n\n@Component({\n  selector: 'app-password-reset-request',\n  templateUrl: './password-reset-request.component.html',\n  styleUrls: ['./password-reset-request.component.css']\n})\nexport class PasswordResetRequestComponent implements OnInit {\n\n  private email: string;\n  form: FormGroup;\n  loading: boolean;\n\n  constructor(private authService: AuthenticationService,\n    private notificationService: NotificationService,\n    private titleService: Title,\n    private router: Router) { }\n\n  ngOnInit() {\n    this.titleService.setTitle('angular-material-template - Password Reset Request');\n\n    this.form = new FormGroup({\n      email: new FormControl('', [Validators.required, Validators.email])\n    });\n\n    this.form.get('email').valueChanges\n      .subscribe((val: string) => { this.email = val.toLowerCase(); });\n  }\n\n  resetPassword() {\n    this.loading = true;\n    this.authService.passwordResetRequest(this.email)\n      .subscribe(\n        results => {\n          this.router.navigate(['/auth/login']);\n          this.notificationService.openSnackBar('Password verification mail has been sent to your email address.');\n        },\n        error => {\n          this.loading = false;\n          this.notificationService.openSnackBar(error.error);\n        }\n      );\n  }\n\n  cancel() {\n    this.router.navigate(['/']);\n  }\n}\n// this.userService.getAllAssets().pipe(first()).subscribe(data => {\n//   console.log(data)\n//   this.loading = false;\n//   // this.assets = assets;\n// });","<div class=\"container login-container\" fxLayout=\"row\" fxLayoutAlign=\"center center\">\n    <form [formGroup]=\"form\" fxFlex=\"30%\" fxFlex.sm=\"50%\" fxFlex.xs=\"90%\">\n        <mat-card>\n            <mat-card-title>angular-material-template</mat-card-title>\n            <mat-card-subtitle>Reset your password</mat-card-subtitle>\n            <mat-card-content>\n\n                <mat-form-field class=\"full-width\">\n                    <input id=\"emailInput\" matInput placeholder=\"Email\" formControlName=\"email\" autocomplete=\"email\" type=\"email\">\n\n                    <mat-error id=\"invalidEmailError\" *ngIf=\"form.controls['email'].hasError('email')\">\n                        Please enter a valid email address\n                    </mat-error>\n                    <mat-error id=\"requiredEmailError\" *ngIf=\"form.controls['email'].hasError('required')\">\n                        Email is\n                        <strong>required</strong>\n                    </mat-error>\n                </mat-form-field>\n\n            </mat-card-content>\n\n            <mat-card-actions class=\"login-actions\">\n                <button id=\"submit\" mat-raised-button color=\"primary\" [disabled]=\"form.invalid || loading\"\n                    (click)=\"resetPassword()\">Reset Password</button>\n                <button id=\"cancel\" mat-button (click)=\"cancel()\">Cancel</button>\n            </mat-card-actions>\n\n        </mat-card>\n\n        <mat-progress-bar *ngIf=\"loading\" mode=\"indeterminate\"></mat-progress-bar>\n    </form>\n</div>","import { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router, ParamMap } from '@angular/router';\nimport { Component, OnInit } from '@angular/core';\nimport { Title } from '@angular/platform-browser';\n\nimport { NotificationService } from '../../core/services/notification.service';\nimport { AuthenticationService } from '../../core/services/auth.service';\n\n@Component({\n  selector: 'app-password-reset',\n  templateUrl: './password-reset.component.html',\n  styleUrls: ['./password-reset.component.css']\n})\nexport class PasswordResetComponent implements OnInit {\n\n  private token: string;\n  email: string;\n  form: FormGroup;\n  loading: boolean;\n  hideNewPassword: boolean;\n  hideNewPasswordConfirm: boolean;\n\n  constructor(private activeRoute: ActivatedRoute,\n    private router: Router,\n    private authService: AuthenticationService,\n    private notificationService: NotificationService,\n    private titleService: Title) {\n\n    this.titleService.setTitle('angular-material-template - Password Reset');\n    this.hideNewPassword = true;\n    this.hideNewPasswordConfirm = true;\n  }\n\n  ngOnInit() {\n    this.activeRoute.queryParamMap.subscribe((params: ParamMap) => {\n      this.token = params.get('token');\n      this.email = params.get('email');\n\n      if (!this.token || !this.email) {\n        this.router.navigate(['/']);\n      }\n    });\n\n    this.form = new FormGroup({\n      newPassword: new FormControl('', Validators.required),\n      newPasswordConfirm: new FormControl('', Validators.required)\n    });\n  }\n\n  resetPassword() {\n\n    const password = this.form.get('newPassword').value;\n    const passwordConfirm = this.form.get('newPasswordConfirm').value;\n\n    if (password !== passwordConfirm) {\n      this.notificationService.openSnackBar('Passwords do not match');\n      return;\n    }\n\n    this.loading = true;\n\n    this.authService.passwordReset(this.email, this.token, password, passwordConfirm)\n      .subscribe(\n        data => {\n          this.notificationService.openSnackBar('Your password has been changed.');\n          this.router.navigate(['/auth/login']);\n        },\n        error => {\n          this.notificationService.openSnackBar(error.error);\n          this.loading = false;\n        }\n      );\n  }\n\n  cancel() {\n    this.router.navigate(['/']);\n  }\n}\n","<div class=\"container login-container\" fxLayout=\"row\" fxLayoutAlign=\"center center\">\n  <form [formGroup]=\"form\" fxFlex=\"30%\" fxFlex.sm=\"50%\" fxFlex.xs=\"90%\">\n      <mat-card>\n          <mat-card-title>hi-material-template</mat-card-title>\n          <mat-card-subtitle>Reset your password</mat-card-subtitle>\n          <mat-card-content>\n\n              <mat-form-field class=\"full-width\">\n                  <input id=\"emailInput\" matInput readonly disabled [value]=\"email\">\n              </mat-form-field>\n\n              <mat-form-field class=\"full-width\">\n                <input id=\"passwordInput\" matInput placeholder=\"New Password\" formControlName=\"newPassword\" [type]=\"hideNewPassword ? 'password' : 'text'\" autocomplete=\"new-password\">\n                <mat-icon id=\"togglePasswordVisibility\" matSuffix (click)=\"hideNewPassword = !hideNewPassword\">\n                  {{hideNewPassword ? 'visibility' : 'visibility_off'}}\n                </mat-icon>\n          \n                <mat-error *ngIf=\"form.controls['newPassword'].hasError('required')\">\n                  Please enter a new password\n                </mat-error>\n              </mat-form-field>\n\n              <mat-form-field class=\"full-width\">\n                <input id=\"passwordConfirmInput\" matInput placeholder=\"New Password Confirmation\" formControlName=\"newPasswordConfirm\" [type]=\"hideNewPasswordConfirm ? 'password' : 'text'\" autocomplete=\"new-password\">\n                <mat-icon id=\"togglePasswordConfirmVisibility\" matSuffix (click)=\"hideNewPasswordConfirm = !hideNewPasswordConfirm\">\n                  {{hideNewPasswordConfirm ? 'visibility' : 'visibility_off'}}\n                </mat-icon>\n          \n                <mat-error *ngIf=\"form.controls['newPasswordConfirm'].hasError('required')\">\n                  Please enter a your current password\n                </mat-error>\n              </mat-form-field>\n\n          </mat-card-content>\n\n          <mat-card-actions class=\"login-actions\">\n              <button id=\"submit\" mat-raised-button color=\"primary\" [disabled]=\"form.invalid || loading\" (click)=\"resetPassword()\">OK</button>\n              <button id=\"cancel\" mat-button (click)=\"cancel()\">Back to Login</button>\n          </mat-card-actions>\n\n      </mat-card>\n\n      <mat-progress-bar *ngIf=\"loading\" mode=\"indeterminate\"></mat-progress-bar>\n  </form>\n</div>"],"sourceRoot":"webpack:///"}